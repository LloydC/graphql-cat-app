{"ast":null,"code":"var _jsxFileName = \"/Users/lloydchambrier/Desktop/graphql/cat-app/client/src/App.js\";\nimport React, { useState } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport gql from 'graphql-tag';\nimport { ApolloProvider, ApolloConsumer } from 'react-apollo';\n\nfunction App() {\n  const [catname, setCatname] = useState('');\n  const client = new ApolloClient({\n    uri: \"http://localhost:4000/graphql\"\n  });\n\n  const catQuery = client => {\n    client.query({\n      query: gql`\n      {\n        cats {\n          name\n        }\n      }\n      `\n    }).then(result => console.log(result.data)).catch(e => console.error(e));\n  };\n\n  const createCat = (client, name) => {\n    client.mutate({\n      mutation: gql`\n          {\n            createCat({name})\n          }\n        `\n    }).then(result => console.log(result)).catch(e => console.error(e));\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    createCat(client, catname);\n  };\n\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }, \"Cat App\", /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: catname,\n    onChange: e => {\n      setCatname(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 8\n    }\n  }, \"Add Cat\")), /*#__PURE__*/React.createElement(ApolloConsumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }\n  }, catQuery));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lloydchambrier/Desktop/graphql/cat-app/client/src/App.js"],"names":["React","useState","ApolloClient","gql","ApolloProvider","ApolloConsumer","App","catname","setCatname","client","uri","catQuery","query","then","result","console","log","data","catch","e","error","createCat","name","mutate","mutation","handleSubmit","preventDefault","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA8C,cAA9C;;AAIA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMQ,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,IAAAA,GAAG,EAAE;AADyB,GAAjB,CAAf;;AAIA,QAAMC,QAAQ,GAAIF,MAAD,IAAY;AAC3BA,IAAAA,MAAM,CACLG,KADD,CACO;AACLA,MAAAA,KAAK,EAAET,GAAK;;;;;;;AADP,KADP,EASGU,IATH,CASQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB,CATlB,EAUCC,KAVD,CAUOC,CAAC,IAAIJ,OAAO,CAACK,KAAR,CAAcD,CAAd,CAVZ;AAWD,GAZD;;AAcA,QAAME,SAAS,GAAG,CAACZ,MAAD,EAASa,IAAT,KAAgB;AAChCb,IAAAA,MAAM,CACLc,MADD,CACQ;AAEJC,MAAAA,QAAQ,EAAErB,GAAK;;;;;AAFX,KADR,EAUCU,IAVD,CAUMC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAVhB,EAWCI,KAXD,CAWOC,CAAC,IAAIJ,OAAO,CAACK,KAAR,CAAcD,CAAd,CAXZ;AAYD,GAbD;;AAeAM,EAAAA,YAAY,GAAIN,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACO,cAAF;AACAL,IAAAA,SAAS,CAACZ,MAAD,EAASF,OAAT,CAAT;AACD,GAHD;;AAIA,sBACC,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE;AAAM,IAAA,QAAQ,EAAEgB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAElB,OAAtC;AAA+C,IAAA,QAAQ,EAAGY,CAAD,IAAK;AAACX,MAAAA,UAAU,CAACW,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAV;AAA2B,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CAFF,eAME,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,QADH,CANF,CADD;AAYD;;AAED,eAAeL,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport gql from 'graphql-tag'\nimport { ApolloProvider, ApolloConsumer} from 'react-apollo'\n\n\n\nfunction App() {\n  const [catname, setCatname] = useState('')\n  const client = new ApolloClient({\n    uri: \"http://localhost:4000/graphql\"\n  })\n  \n  const catQuery = (client) => {\n    client\n    .query({\n      query: gql `\n      {\n        cats {\n          name\n        }\n      }\n      `\n    }).then(result => console.log(result.data))\n    .catch(e => console.error(e))\n  }\n  \n  const createCat = (client, name)=>{\n    client\n    .mutate({\n      \n        mutation: gql `\n          {\n            createCat({name})\n          }\n        `\n      \n    })\n    .then(result => console.log(result))\n    .catch(e => console.error(e))\n  }\n  \n  handleSubmit = (e) => {\n    e.preventDefault()\n    createCat(client, catname)\n  }\n  return (\n   <ApolloProvider client={client}>\n     Cat App\n     <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"name\" value={catname} onChange={(e)=>{setCatname(e.target.value)}}/>\n       <button type=\"submit\">Add Cat</button>\n     </form>\n     <ApolloConsumer>\n       {catQuery}\n     </ApolloConsumer>\n   </ApolloProvider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}