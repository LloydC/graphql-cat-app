{"ast":null,"code":"var _jsxFileName = \"/Users/lloydchambrier/Desktop/graphql/cat-app/client/src/App.js\";\nimport React, { useState } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport gql from 'graphql-tag';\nimport { ApolloProvider, ApolloConsumer } from 'react-apollo';\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nconst catQuery = client => {\n  client.query({\n    query: gql`\n    {\n      cats {\n        name\n      }\n    }\n    `\n  }).then(result => console.log(result.data)).catch(e => console.error(e));\n}; //Need to fix this\n// const createCat = (client, $name)=>{\n//   client\n//   .mutate({\n//     mutation: gql `mutation createCat($name: String!) {\n//       id\n//       name\n//     }`\n//   })\n//   .then(result => console.log(result))\n//   .catch(e => console.error(e))\n// }\n\n\nfunction App() {\n  const [catname, setCatname] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault(); // createCat(client, catname)\n  };\n\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }, \"Cat App\", /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: catname,\n    onChange: e => {\n      setCatname(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }\n  }, \"Add Cat\")), /*#__PURE__*/React.createElement(ApolloConsumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 6\n    }\n  }, catQuery));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/lloydchambrier/Desktop/graphql/cat-app/client/src/App.js"],"names":["React","useState","ApolloClient","gql","ApolloProvider","ApolloConsumer","client","uri","catQuery","query","then","result","console","log","data","catch","e","error","App","catname","setCatname","handleSubmit","preventDefault","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA8C,cAA9C;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,MAAMC,QAAQ,GAAIF,MAAD,IAAY;AAC3BA,EAAAA,MAAM,CACLG,KADD,CACO;AACLA,IAAAA,KAAK,EAAEN,GAAK;;;;;;;AADP,GADP,EASGO,IATH,CASQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB,CATlB,EAUCC,KAVD,CAUOC,CAAC,IAAIJ,OAAO,CAACK,KAAR,CAAcD,CAAd,CAVZ;AAWD,CAZD,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMoB,YAAY,GAAIL,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACM,cAAF,GAD0B,CAE1B;AACD,GAHD;;AAKA,sBACC,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEhB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE;AAAM,IAAA,QAAQ,EAAEe,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAEF,OAAtC;AAA+C,IAAA,QAAQ,EAAGH,CAAD,IAAK;AAACI,MAAAA,UAAU,CAACJ,CAAC,CAACO,MAAF,CAASC,KAAV,CAAV;AAA2B,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,eAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CAFF,eAME,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,QADH,CANF,CADD;AAYD;;AAED,eAAeU,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport gql from 'graphql-tag'\nimport { ApolloProvider, ApolloConsumer} from 'react-apollo'\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n})\n\nconst catQuery = (client) => {\n  client\n  .query({\n    query: gql `\n    {\n      cats {\n        name\n      }\n    }\n    `\n  }).then(result => console.log(result.data))\n  .catch(e => console.error(e))\n}\n\n//Need to fix this\n// const createCat = (client, $name)=>{\n//   client\n//   .mutate({\n//     mutation: gql `mutation createCat($name: String!) {\n//       id\n//       name\n//     }`\n//   })\n//   .then(result => console.log(result))\n//   .catch(e => console.error(e))\n// }\n\n\nfunction App() {\n  const [catname, setCatname] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    // createCat(client, catname)\n  }\n\n  return (\n   <ApolloProvider client={client}>\n     Cat App\n     <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"name\" value={catname} onChange={(e)=>{setCatname(e.target.value)}}/>\n       <button type=\"submit\">Add Cat</button>\n     </form>\n     <ApolloConsumer>\n       {catQuery}\n     </ApolloConsumer>\n   </ApolloProvider>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}